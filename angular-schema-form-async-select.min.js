!function(e,o){"function"==typeof define&&define.amd?define(["angular-schema-form"],o):"object"==typeof exports?module.exports=o(require("angular-schema-form")):e.angularSchemaFormAsyncSelect=o(e.schemaForm)}(this,function(e){angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/strap/straparray.html",'<div sf-array="form" class="schema-form-array {{form.htmlClass}}" ng-class="{\'has-error\':hasError()}" ng-model="$$value$$" ng-model-options="form.ngModelOptions"><label class="control-label" ng-show="showTitle()">{{ form.title }}</label><ul class="list-group" ng-model="modelArray" ui-sortable="options.sortableOptions"><li class="list-group-item {{form.fieldHtmlClass}}" ng-init="form.onAdd && form.onAdd()" ng-repeat="item in modelArray track by $index"><div class="action-buttons row"><div class="col-md-12"><span ng-hide="form.readonly || form.remove === null" ng-click="deleteFromArray($index);form.onRemove && form.onRemove(form)" style="position: relative; z-index: 20;" type="button" class="close pull-right"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></span> <span ng-hide="!form.onClone" ng-click="form.onClone(item);" style="position: relative; z-index: 20;" class="clone pull-right" title="Clone element"><i class="fa fa-clone"></i></span></div></div><sf-decorator class="{{$parent.form.decoratorClass}}" ng-init="arrayIndex = $index" form="copyWithIndex($index)"></sf-decorator></li></ul><div class="clearfix" ng-controller="addButtonController" style="padding: 15px;"><button ng-disabled="form.checkaddbutton && addButtonFlag" ng-hide="form.readonly || form.add === null" ng-click="appendToArray()" type="button" class="btn {{ form.style.add || \'btn-default\' }} pull-right"><i class="glyphicon glyphicon-plus"></i> {{ form.add || \'Add\'}}</button></div><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div>'),e.put("directives/decorators/bootstrap/strap/strapcheckbox.html",'<div class="form-group {{form.htmlClass}}"><label class="{{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label><div class="form-group {{form.fieldHtmlClass}}"><md-checkbox class="pull-left clearfix" sf-changed="form" ng-disabled="form.readonly" ng-model="$$value$$" ng-model-options="form.ngModelOptions" schema-validate="form" aria-label="{{form.title}}" name="{{form.key.slice(-1)[0]}}"></md-checkbox><div class="help-block" sf-message="form.description"></div></div></div>'),e.put("directives/decorators/bootstrap/strap/strapinput.html",'<div class="form-group schema-form-{{form.type}} {{form.htmlClass}}" ng-class="{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess(), \'has-feedback\': form.feedback !== false }"><label class="control-label {{form.labelHtmlClass}}" ng-class="{\'sr-only\': !showTitle()}" for="{{form.key.slice(-1)[0]}}">{{form.title}}</label> <input ng-if="!form.fieldAddonLeft && !form.fieldAddonRight" ng-show="form.key" type="{{form.type}}" step="any" sf-changed="form" placeholder="{{form.placeholder}}" class="{{form.fieldHtmlClass}}" id="{{form.key.slice(-1)[0]}}" ng-model-options="form.ngModelOptions" ng-model="$$value$$" ng-disabled="form.readonly" schema-validate="form" name="{{form.key.slice(-1)[0]}}" aria-describedby="{{form.key.slice(-1)[0] + \'Status\'}}"><div ng-if="form.fieldAddonLeft || form.fieldAddonRight" ng-class="{\'input-group\': (form.fieldAddonLeft || form.fieldAddonRight)}"><span ng-if="form.fieldAddonLeft" class="input-group-addon" ng-bind-html="form.fieldAddonLeft"></span> <input ng-show="form.key" type="{{form.type}}" step="any" sf-changed="form" placeholder="{{form.placeholder}}" class="{{form.fieldHtmlClass}}" id="{{form.key.slice(-1)[0]}}" ng-model-options="form.ngModelOptions" ng-model="$$value$$" ng-disabled="form.readonly" schema-validate="form" name="{{form.key.slice(-1)[0]}}" aria-describedby="{{form.key.slice(-1)[0] + \'Status\'}}"> <span ng-if="form.fieldAddonRight" class="input-group-addon" ng-bind-html="form.fieldAddonRight"></span></div><span ng-if="hasError() || hasSuccess()" id="{{form.key.slice(-1)[0] + \'Status\'}}" class="sr-only">{{ hasSuccess() ? \'(success)\' : \'(error)\' }}</span><div class="help-block" ng-if="hasError()" sf-message="(form.description || \'Required\')"></div></div>'),e.put("directives/decorators/bootstrap/strap/strapmultiselect.html",'<div ng-controller="asyncSelectController" class="form-group {{form.htmlClass}}" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label><div class="form-group {{form.fieldHtmlClass}}" ng-init="populateTitleMap(form)"><button type="button" class="btn btn-default" sf-changed="form" schema-validate="form" ng-model="$$value$$" data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}" data-html="1" data-multiple="1" data-max-length="{{form.options.inlineMaxLength}}" data-max-length-html="{{form.options.inlineMaxLengthHtml}}" bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;" bs-select=""></button> <span class="help-block">{{ (hasError() && errorMessage(schemaError())) || form.description}}</span></div></div>'),e.put("directives/decorators/bootstrap/strap/strapselect.html",'<div ng-controller="asyncSelectController" class="form-group {{form.htmlClass}}" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><label class="{{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label><div class="form-group {{form.fieldHtmlClass}}" ng-init="populateTitleMap(form)"><button ng-if="!((form.options.multiple == \'true\') || (form.options.multiple == true))" type="button" class="grey lighten-5 black-text btn-sm btn" sf-changed="form" ng-model="$$value$$" schema-validate="form" data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}" data-html="1" ng-disabled="!form.titleMap.length" bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;" bs-select=""></button><md-progress-linear md-mode="indeterminate" style="height:3px;overflow:hidden" ng-if="form.loading"></md-progress-linear><div class="help-block" ng-if="hasError()" sf-message="(form.description || \'Required\')"></div></div></div>'),e.put("directives/decorators/bootstrap/strap/strapwarningmsg.html",'<div class="form-group {{form.htmlClass}}" ng-class="{\'has-error\': hasError()}"><label class="{{form.labelHtmlClass}}" ng-show="showTitle()">Warning</label><div class="help-block" ng-if="hasError()" ng-bind="$$value$$"></div><span class="error" sf-changed="form" ng-model="$$value$$" schema-validate="form"></span></div>')}]),angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/strap/straparray.html",'<div sf-array="form" class="schema-form-array {{form.htmlClass}}" ng-class="{\'has-error\':hasError()}" ng-model="$$value$$" ng-model-options="form.ngModelOptions"><label class="control-label" ng-show="showTitle()">{{ form.title }}</label><ul class="list-group" ng-model="modelArray" ui-sortable="options.sortableOptions"><li class="list-group-item {{form.fieldHtmlClass}}" ng-init="form.onAdd && form.onAdd()" ng-repeat="item in modelArray track by $index"><div class="action-buttons row"><div class="col-md-12"><span ng-hide="form.readonly || form.remove === null" ng-click="deleteFromArray($index);form.onRemove && form.onRemove(form)" style="position: relative; z-index: 20;" type="button" class="close pull-right"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></span> <span ng-hide="!form.onClone" ng-click="form.onClone(item);" style="position: relative; z-index: 20;" class="clone pull-right" title="Clone element"><i class="fa fa-clone"></i></span></div></div><sf-decorator class="{{$parent.form.decoratorClass}}" ng-init="arrayIndex = $index" form="copyWithIndex($index)"></sf-decorator></li></ul><div class="clearfix" ng-controller="addButtonController" style="padding: 15px;"><button ng-disabled="form.checkaddbutton && addButtonFlag" ng-hide="form.readonly || form.add === null" ng-click="appendToArray()" type="button" class="btn {{ form.style.add || \'btn-default\' }} pull-right"><i class="glyphicon glyphicon-plus"></i> {{ form.add || \'Add\'}}</button></div><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div>'),e.put("directives/decorators/bootstrap/strap/strapcheckbox.html",'<div class="form-group {{form.htmlClass}}"><label class="{{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label><div class="form-group {{form.fieldHtmlClass}}"><md-checkbox class="pull-left clearfix" sf-changed="form" ng-disabled="form.readonly" ng-model="$$value$$" ng-model-options="form.ngModelOptions" schema-validate="form" aria-label="{{form.title}}" name="{{form.key.slice(-1)[0]}}"></md-checkbox><div class="help-block" sf-message="form.description"></div></div></div>'),e.put("directives/decorators/bootstrap/strap/strapinput.html",'<div class="form-group schema-form-{{form.type}} {{form.htmlClass}}" ng-class="{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess(), \'has-feedback\': form.feedback !== false }"><label class="control-label {{form.labelHtmlClass}}" ng-class="{\'sr-only\': !showTitle()}" for="{{form.key.slice(-1)[0]}}">{{form.title}}</label> <input ng-if="!form.fieldAddonLeft && !form.fieldAddonRight" ng-show="form.key" type="{{form.type}}" step="any" sf-changed="form" placeholder="{{form.placeholder}}" class="{{form.fieldHtmlClass}}" id="{{form.key.slice(-1)[0]}}" ng-model-options="form.ngModelOptions" ng-model="$$value$$" ng-disabled="form.readonly" schema-validate="form" name="{{form.key.slice(-1)[0]}}" aria-describedby="{{form.key.slice(-1)[0] + \'Status\'}}"><div ng-if="form.fieldAddonLeft || form.fieldAddonRight" ng-class="{\'input-group\': (form.fieldAddonLeft || form.fieldAddonRight)}"><span ng-if="form.fieldAddonLeft" class="input-group-addon" ng-bind-html="form.fieldAddonLeft"></span> <input ng-show="form.key" type="{{form.type}}" step="any" sf-changed="form" placeholder="{{form.placeholder}}" class="{{form.fieldHtmlClass}}" id="{{form.key.slice(-1)[0]}}" ng-model-options="form.ngModelOptions" ng-model="$$value$$" ng-disabled="form.readonly" schema-validate="form" name="{{form.key.slice(-1)[0]}}" aria-describedby="{{form.key.slice(-1)[0] + \'Status\'}}"> <span ng-if="form.fieldAddonRight" class="input-group-addon" ng-bind-html="form.fieldAddonRight"></span></div><span ng-if="hasError() || hasSuccess()" id="{{form.key.slice(-1)[0] + \'Status\'}}" class="sr-only">{{ hasSuccess() ? \'(success)\' : \'(error)\' }}</span><div class="help-block" ng-if="hasError()" sf-message="(form.description || \'Required\')"></div></div>'),e.put("directives/decorators/bootstrap/strap/strapmultiselect.html",'<div ng-controller="asyncSelectController" class="form-group {{form.htmlClass}}" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label><div class="form-group {{form.fieldHtmlClass}}" ng-init="populateTitleMap(form)"><button type="button" class="btn btn-default" sf-changed="form" schema-validate="form" ng-model="$$value$$" data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}" data-html="1" data-multiple="1" data-max-length="{{form.options.inlineMaxLength}}" data-max-length-html="{{form.options.inlineMaxLengthHtml}}" bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;" bs-select=""></button> <span class="help-block">{{ (hasError() && errorMessage(schemaError())) || form.description}}</span></div></div>'),e.put("directives/decorators/bootstrap/strap/strapselect.html",'<div ng-controller="asyncSelectController" class="form-group {{form.htmlClass}}" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><label class="{{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label><div class="form-group {{form.fieldHtmlClass}}" ng-init="populateTitleMap(form)"><button ng-if="!((form.options.multiple == \'true\') || (form.options.multiple == true))" type="button" class="grey lighten-5 black-text btn-sm btn" sf-changed="form" ng-model="$$value$$" schema-validate="form" data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}" data-html="1" ng-disabled="!form.titleMap.length" bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;" bs-select=""></button><md-progress-linear md-mode="indeterminate" style="height:3px;overflow:hidden" ng-if="form.loading"></md-progress-linear><div class="help-block" ng-if="hasError()" sf-message="(form.description || \'Required\')"></div></div></div>'),e.put("directives/decorators/bootstrap/strap/strapwarningmsg.html",'<div class="form-group {{form.htmlClass}}" ng-class="{\'has-error\': hasError()}"><label class="{{form.labelHtmlClass}}" ng-show="showTitle()">Warning</label><div class="help-block" ng-if="hasError()" ng-bind="$$value$$"></div><span class="error" sf-changed="form" ng-model="$$value$$" schema-validate="form"></span></div>')}]),angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(e,o,t){var r=function(o,r,l){if("string"===r.type&&"enum"in r){var a=e.stdFormObj(o,r,l);return a.key=l.path,a.type="strapselect",l.lookup[t.stringify(l.path)]=a,a}};e.defaults.string.unshift(r),o.addMapping("bootstrapDecorator","strapselect","directives/decorators/bootstrap/strap/strapselect.html"),o.addMapping("bootstrapDecorator","strapmultiselect","directives/decorators/bootstrap/strap/strapmultiselect.html"),o.addMapping("bootstrapDecorator","array","directives/decorators/bootstrap/strap/straparray.html"),o.addMapping("bootstrapDecorator","default","directives/decorators/bootstrap/strap/strapinput.html"),o.addMapping("bootstrapDecorator","strapselectasync","directives/decorators/bootstrap/strap/strapselect.html"),o.addMapping("bootstrapDecorator","checkbox","directives/decorators/bootstrap/strap/strapcheckbox.html"),o.addMapping("bootstrapDecorator","warningmsg","directives/decorators/bootstrap/strap/strapwarningmsg.html")}]).directive("toggleSingleModel",function(){return{require:"ngModel",restrict:"A",scope:{},replace:!0,controller:["$scope",function(e){e.$parent.$watch("select_model.selected",function(){void 0!=e.$parent.select_model.selected&&(e.$parent.insideModel=e.$parent.select_model.selected.value,e.$parent.ngModel.$setViewValue(e.$parent.select_model.selected.value))})}]}}).directive("multipleOn",function(){return{link:function(e,o,t){e.$watch(function(){return o.attr("multiple-on")},function(e){if("true"==e){var t=angular.element(o).scope().$$childTail;t.$isMultiple=!0,t.options.multiple=!0,t.$select.$element.addClass("select-multiple")}else angular.element(o).scope().$$childTail.$isMultiple=!1})}}}).filter("whereMulti",function(){return function(e,o,t){var r=[];return angular.isArray(t)&&void 0!==e?t.forEach(function(t){for(var l=0;l<e.length;l++)if(t==e[l][o]){r.push(e[l]);break}}):r=e,r}}).filter("propsFilter",function(){return function(e,o){var t=[];return angular.isArray(e)?e.forEach(function(e){for(var r=!1,l=Object.keys(o),a=0;a<l.length;a++){var s=l[a];if(e.hasOwnProperty(s)){var n=o[s].toLowerCase();if(0===e[s].toString().toLowerCase().indexOf(n)||-1!==e[s].toString().toLowerCase().indexOf(" "+n)){r=!0;break}}}r&&t.push(e)}):t=e,t}}),angular.module("schemaForm").controller("asyncSelectController",["$scope","$http","$timeout","schemaForm",function(e,o,t,r){e.form.options||(e.form.options={}),e.select_model={},e.form.options.scope=e,e.triggerTitleMap=function(){e.form.titleMap.push({value:"345890u340598u3405u9",name:"34095u3p4ouij"}),t(function(){e.form.titleMap.pop()})},e.$on("refreshSelect",function(){e.populateTitleMap(e.form)}),e.initFiltering=function(o){e.form.options.filterTriggers&&e.form.options.filterTriggers.forEach(function(o){e.$parent.$watch(o,e.triggerTitleMap)}),e.localModelType=Object.prototype.toString.call(o),e.filteringInitialized=!0},e.finalizeTitleMap=function(o,t,r){if(e.form.loading=!1,o.titleMap=[],r&&"map"in r&&r.map){var l=r.map.nameProperty.length-1,a=r.map.separatorValue?r.map.separatorValue:" - ";t.forEach(function(e){if(e.value=e[r.map.valueProperty],"string"!=typeof r.map.nameProperty){var t="";for(var s in r.map.nameProperty)t+=e[r.map.nameProperty[s]],s!=l&&(t+=a);e.name=t}else e.name=e[r.map.nameProperty];o.titleMap.push(e)})}else t.forEach(function(e){"text"in e&&(e.name=e.text)}),o.titleMap=t;"string"!=typeof e.ngModel.$modelValue||e.find_in_titleMap(e.ngModel.$modelValue)||o.key.reduce(function(e,t,r){return r!=o.key.length-1?e[t]:void delete e[t]},e.model),e.insideModel&&void 0===e.select_model.selected&&(e.select_model.selected=e.find_in_titleMap(e.insideModel)),e.internalModel&&e.uiMultiSelectInitInternalModel(e.externalModel)},e.clone=function(o){if(null==o||"object"!=typeof o)return o;var t=o.constructor();for(var r in o)o[r]!=e&&o.hasOwnProperty(r)&&(t[r]=e.clone(o[r]));return t},e.getCallback=function(o){if("string"==typeof o){var t=e.$parent.evalExpr(o);if("function"==typeof t)return t;throw"A callback string must match name of a function in the parent scope"}if("function"==typeof o)return o;throw"A callback must either be a string matching the name of a function in the parent scope or a direct function reference"},e.getOptions=function(o,t){return o.httpPost&&o.httpPost.optionsCallback?(newOptionInstance=e.clone(o),e.getCallback(o.httpPost.optionsCallback)(newOptionInstance,t)):o.httpGet&&o.httpGet.optionsCallback?(newOptionInstance=e.clone(o),e.getCallback(o.httpGet.optionsCallback)(newOptionInstance,t)):o},e.test=function(e){e.titleMap.pop()},e.populateTitleMap=function(t,r){if(t.loading=!0,t.schema&&"enum"in t.schema)t.titleMap=[],t.schema["enum"].forEach(function(e){t.titleMap.push({value:e,name:e})}),t.loading=!1;else if(t.options)if(t.options.callback)t.titleMap=e.getCallback(t.options.callback)(t.options,r),e.finalizeTitleMap(t,t.titleMap,t.options);else{if(t.options.asyncCallback)return e.getCallback(t.options.asyncCallback)(t.options,r).then(function(o){e.finalizeTitleMap(t,o.data,t.options)},function(e,o){console.log("Loading select items failed(Options: '"+String(t.options)+"\nError: "+o),t.loading=!1});if(t.options.httpPost){var l=e.getOptions(t.options,r);return o.post(l.httpPost.url,l.httpPost.parameter).then(function(o){e.finalizeTitleMap(t,o.data,l)},function(e,o){console.log("Loading select items failed (URL: '"+String(l.httpPost.url)+"' Parameter: "+String(l.httpPost.parameter)+"\nError: "+o),t.loading=!1})}if(t.options.httpGet){var l=e.getOptions(t.options,r);return o.get(l.httpGet.url,l.httpGet.parameter).then(function(o){e.finalizeTitleMap(t,o.data,l)},function(e,o){console.log("Loading select items failed (URL: '"+String(l.httpGet.url)+"\nError: "+o),t.loading=!1})}t.loading=!1}else;},e.find_in_titleMap=function(o){for(form.loading=!1,i=0;i<e.form.titleMap.length;i++)if(e.form.titleMap[i].value==o)return{value:e.form.titleMap[i].value,name:e.form.titleMap[i].name}},e.uiMultiSelectInitInternalModel=function(o){e.externalModel=o,e.internalModel=[],e.form.titleMap&&void 0!==o&&angular.isArray(o)&&o.forEach(function(o){e.internalModel.push(e.find_in_titleMap(o))})}}]),angular.module("schemaForm").filter("selectFilter",[function(e){return function(e,o,t,r){if(!angular.isDefined(e)||!angular.isDefined(o.form.options)||!angular.isDefined(o.form.options.filter)||""==o.form.options.filter)return e;o.filteringInitialized||o.initFiltering(t);var l=[];return angular.forEach(e,function(e){o.$eval(o.form.options.filter,{item:e})?l.push(e):t&&("[object Array]"==o.localModelType&&t.indexOf(e.value)>-1?t.splice(t.indexOf(e.value),1):t==e.value&&(t=null))}),"[object Array]"!=o.localModelType||t||o.$eval(r+"=[]"),l}}]),angular.module("schemaForm").controller("addButtonController",["$scope","$http",function(e,o){e.addButtonFlag=!1,e.$on("arrayAddButtonReferesh",function(o,t,r){void 0!==r?_.isEqual(e.form.key[1],r)&&(e.addButtonFlag=t):e.addButtonFlag=t})}])});